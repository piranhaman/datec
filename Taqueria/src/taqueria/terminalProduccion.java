/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package taqueria;

import static Reportes.PDFVentasDia.getPlatoCategoria;
import static Reportes.PDFVentasDia.getPlatoNombre;
import SQL.ConexionMySQL;
import java.applet.AudioClip;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JApplet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author el dios
 */
public class terminalProduccion extends javax.swing.JFrame {

    /**
     * Creates new form terminalTaquero
     */
    SocketCliente cliente;
    public static ArrayList<ordenAEnviar> ordenes;
    public static String status = "";
    String nombre = "";
    static public AudioClip clip1, clip2;

    public terminalProduccion(String nombre) {

        this.setUndecorated(true);
        initComponents();
        this.setDefaultCloseOperation(0);
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.nombre = nombre;
        TableColumnModel columnModel = jTable1.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(150);
        columnModel.getColumn(1).setPreferredWidth(400);

        cliente = new SocketCliente(this.nombre);
        cliente.start();
        ordenes = new ArrayList<>();
        jTable1.requestFocusInWindow();
        status = "ACTIVO";
        Enumeration<TableColumn> en = jTable1.getColumnModel().getColumns();
        while (en.hasMoreElements()) {
            TableColumn tc = en.nextElement();
            tc.setCellRenderer(new FormatoTabla());
        }
        setExtendedState(6);

        try {
            /*
           1-campana
           2- campana de vaca doble
           3-campana de vaca simple
           4- vaca
             */

            clip1 = JApplet.newAudioClip(new File("Sonidos/4.wav").toURL());
            clip2 = JApplet.newAudioClip(new File("Sonidos/2.wav").toURL());
            ReproducirSonido(clip1);
        } catch (IOException ex) {
            Logger.getLogger(terminalProduccion.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 300)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("00");

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 50)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mesa", "Orden"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setMaximumSize(new java.awt.Dimension(2147483647, 32));
        jTable1.setMinimumSize(new java.awt.Dimension(30, 32));
        jTable1.setRowHeight(55);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Salir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1050, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased

        char letra = evt.getKeyChar();
        if (letra == '6') {
            quitarOden();
        } else if (letra == '4') {
            quitarOden();
        } else if (letra == '0') {
            this.cargarOcupadas();
        }

        ReproducirSonido(clip2);
        jTable1.requestFocusInWindow();
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1KeyReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        terminalProduccion.status="inactivo";
        try {
            this.cliente.terminarSesion();
            
        } catch (IOException ex) {
            Logger.getLogger(terminalProduccion.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(terminalProduccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(terminalProduccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(terminalProduccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(terminalProduccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new terminalProduccion("TACOS").setVisible(true);
            }
        });
    }

    public void quitarOden() {
        DefaultTableModel m = (DefaultTableModel) jTable1.getModel();
        try {
            int n = ordenes.get(0).productos.size();
            String ordenMesa = "";
            String nMesa = ordenes.get(0).mesa.substring(4);
            for (int i = 0; i < n; i++) {
                ordenMesa += ordenes.get(0).productos.get(i) + "\n";
                actualizarBase(ordenes.get(0).idVenta, ordenes.get(0).idProd.get(i), ordenes.get(0).nOrden);
                m.removeRow(0);
            }

            ordenes.remove(0);
            if(nMesa.length()<=2)
            jLabel4.setText(nMesa);
            else
            jLabel4.setText("PL");
                
            jTextArea1.setText(ordenMesa);
        } catch (Exception ex) {

        }

    }

    public void actualizarBase(int idVenta, int idPlato, int norden) {
        ConexionMySQL mysql = new ConexionMySQL();
        Connection cn = mysql.Conectar();
        PreparedStatement pst;
        String sSQL = "UPDATE detalleVenta SET  status='TERMINADO' where idVenta =" + idVenta + " and idMenu = " + idPlato + " and nOrden=" + norden;
        try {
            pst = cn.prepareStatement(sSQL);
            int n = pst.executeUpdate();
            if (n > 0) {

            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

    }

    public void cargarOcupadas() {
        ordenes.clear();
        Principal.limpiarTabla(jTable1);
        ConexionMySQL conect = new ConexionMySQL();
        String consulta = "select * from venta where status='Ocupado'";
        ResultSet rs = conect.Consulta(consulta);
        try {
            while (rs.next()) {
                String mesa = (rs.getString("nMesa"));
                String consulta2 = "select * from detalleVenta where idVenta=" + rs.getInt("id") + " and status='PRODUCCION'";
                ResultSet rs2 = conect.Consulta(consulta2);
                DefaultTableModel m;
                m = (DefaultTableModel) jTable1.getModel();
                int ordenante = 0;
                ordenAEnviar or;
                while (rs2.next()) {
                    int orden = rs2.getInt("nOrden");

                    String cat = getPlatoCategoria(rs2.getInt("idMenu"));
                    if (cat.equals("TACOS")) {
                        if (this.nombre.equals("TACOS")) {
                            if (ordenante != orden) {
                                m.addRow(new Object[]{mesa, rs2.getInt("cantidad") + " - " + getPlatoNombre(rs2.getInt("idMenu"))});
                                or = new ordenAEnviar(mesa, rs.getInt("id"), orden);
                                or.agregarAOrden(rs2.getInt("idMenu"), rs2.getInt("cantidad"), getPlatoNombre(rs2.getInt("idMenu")));
                                ordenes.add(or);
                                ordenante = orden;
                            } else {
                                m.addRow(new Object[]{"  ", rs2.getInt("cantidad") + " - " + getPlatoNombre(rs2.getInt("idMenu"))});
                                ordenes.get((ordenes.size() - 1)).agregarAOrden(rs2.getInt("idMenu"), rs2.getInt("cantidad"), getPlatoNombre(rs2.getInt("idMenu")));

                            }
                        }
                    } else if (cat.equals("FUENTE DE SODAS")) {
                        if (this.nombre.equals("FUENTE DE SODAS")) {
                            if (ordenante != orden) {
                                m.addRow(new Object[]{mesa, rs2.getInt("cantidad") + " - " + getPlatoNombre(rs2.getInt("idMenu"))});
                                or = new ordenAEnviar(mesa, rs.getInt("id"), orden);
                                or.agregarAOrden(rs2.getInt("idMenu"), rs2.getInt("cantidad"), getPlatoNombre(rs2.getInt("idMenu")));
                                ordenes.add(or);
                                ordenante = orden;
                            } else {
                                m.addRow(new Object[]{"  ", rs2.getInt("cantidad") + " - " + getPlatoNombre(rs2.getInt("idMenu"))});
                                ordenes.get((ordenes.size() - 1)).agregarAOrden(rs2.getInt("idMenu"), rs2.getInt("cantidad"), getPlatoNombre(rs2.getInt("idMenu")));
                            }
                        }
                    } else if (ordenante != orden) {
                        m.addRow(new Object[]{mesa, rs2.getInt("cantidad") + " - " + getPlatoNombre(rs2.getInt("idMenu"))});
                        or = new ordenAEnviar(mesa, rs.getInt("id"), orden);
                        or.agregarAOrden(rs2.getInt("idMenu"), rs2.getInt("cantidad"), getPlatoNombre(rs2.getInt("idMenu")));
                        ordenes.add(or);
                        ordenante = orden;
                    } else {
                        m.addRow(new Object[]{"  ", rs2.getInt("cantidad") + " - " + getPlatoNombre(rs2.getInt("idMenu"))});
                        ordenes.get((ordenes.size() - 1)).agregarAOrden(rs2.getInt("idMenu"), rs2.getInt("cantidad"), getPlatoNombre(rs2.getInt("idMenu")));
                    }
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex);
        }
    }

    public static void ReproducirSonido(AudioClip clip) {
        clip.play();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}

class FormatoTabla extends DefaultTableCellRenderer {

    Font normal = new Font("Tahoma", Font.PLAIN, 50);
    Font negrilla = new Font("Tahoma", Font.BOLD, 53);
    Font cursiva = new Font("Times new roman", Font.ITALIC, 12);

    public static int index = 0;

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean focused, int row, int column) {
        setEnabled(table == null || table.isEnabled());
        int i = 0;
        for (ordenAEnviar a : terminalProduccion.ordenes) {
            for (String s : a.productos) {
                if (row == (i++)) {

                    if (terminalProduccion.ordenes.indexOf(a) == 0) {
                        setBackground(Color.GREEN);
                        table.setFont(negrilla);//tipo de fuente
                    } else {
                        setBackground(Color.LIGHT_GRAY);
                        table.setFont(normal);//tipo de fuente
                    }

                }
            }
        }
        /*setBackground(Color.cyan);//color de fondo
        table.setFont(normal);//tipo de fuente
        table.setForeground(Color.black);//color de texto
        setHorizontalAlignment(2);//derecha
         */
        //si la celda esta vacia se reemplaza por el texto "<vacio>" y se rellena la celda de color negro y fuente color blanco

        super.getTableCellRendererComponent(table, value, selected, focused, row, column);
        return this;
    }
}
